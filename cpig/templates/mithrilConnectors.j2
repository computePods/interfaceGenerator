// This is a collection of Mithril connectors mixins for the
// {{ options['interfaceName'] }} interface.

// The function associated with each prefix is a "factory" which returns a
// mixin object to be mixed-in to the ultimate Mithril Component.

// Each of the mixin objects contains a getDataFromServer method which
// "remembers" the URL which was originally passed to the "factory" method
// when it create the mixin.

import m from 'mithril'

import { buildUrl, buildArtefactPath } from './{{ outputFiles['httpRouteUtils-httproutes'] }}'

{% for aRootType in rootTypeFiles %}
import { {{ aRootType}}_validate } from './{{ rootTypeFiles[aRootType] }}'
{% endfor %}

function none_validate(someJson) { return true }

export const connectorMixins = {
{% for aMountPoint in httpRoutes %}
{%   if aMountPoint != 'websocket' %}
{%     for anAction in httpRoutes[aMountPoint].actions %}
  "{{ httpRoutes[aMountPoint]['mountPoint'] }}": function(
    entityUrlParts, /* dict of path parts */
  ) {
    entityUrlParts['mountPoint'] = '{{ httpRoutes[aMountPoint]['mountPoint'] }}'
    var artefactPath = buildArtefactPath(entityUrlParts)
    var theUrl       = buildUrl(entityUrlParts)
    if (!theUrl) {
      console.log("Could not build URL for:")
      console.log(entityUrlParts)
      return {
        artefactPath: artefactPath,
        entityType: '{{ httpRoutes[aMountPoint]['mountPoint'] }}',
        entityUrlParts: entityUrlParts,
      }
    }
    var theModel = {
      artefactPath: artefactPath,
      entityType: '{{ httpRoutes[aMountPoint]['mountPoint'] }}',
      entityUrlParts: entityUrlParts,
      "_{{ anAction | lower }}ServerData": function({% if anAction == "PUT" %}requestBody{% endif %}) {
        return m.request({
          method: "{{ anAction }}",
          url: theUrl,
          {% if anAction == "PUT" %}body: requestBody,{% endif %}
        })
      },
      "{{ anAction | lower }}AllServerData": function({% if anAction == "PUT" %}requestBody{% endif %}) {
        theModel.updateRequest = null
        theModel._{{anAction | lower }}ServerData(
          {% if anAction == "PUT" %}requestBody{% endif %}
        ).then(function(response) {
          console.log("----------------------------------------------------")
          console.log("response from connectorMixins")
          console.log(entityUrlParts)
          console.log(theUrl)
          console.log(response);
          console.log("----------------------------------------------------")
          try {
            {{ httpRoutes[aMountPoint].response }}_validate(response)
          } catch (err) {
            console.log(err)
          }
          theModel.data = response
        })
      },
      "{{ anAction | lower }}ChangedServerData": function({% if anAction == "PUT" %}requestBody{% endif %}) {
        theModel.updateRequest = null
        theModel._{{anAction | lower }}ServerData(
          {% if anAction == "PUT" %}requestBody{% endif %}
        ).then(function(response) {
          console.log("----------------------------------------------------")
          console.log("response from connectorMixins")
          console.log(entityUrlParts)
          console.log(theUrl)
          console.log(response);
          console.log("----------------------------------------------------")
          try {
            {{ httpRoutes[aMountPoint].response }}_validate(response)
          } catch (err) {
            console.log(err)
          }
          theModel.data = response
        })
      }
    }
    return theModel
  },
{%     endfor %}
{%   endif %}
{% endfor %}
}
